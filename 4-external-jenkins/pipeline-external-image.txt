pipeline {
    agent any
    
    parameters {
        choice("name": 'BRANCH',choices: 'master\ntest' )
    }
    
    environment {

        REPO_URL = "https://github.com/mikerain/log-collection.git"
    }
    
    stages {
        // stage('ClearnWorkSpace'){
        //     steps {
        //         cleanWs()
        //     }
        // }
        
        stage ('Sync Code') {
            
            steps {
                echo "Clone ${BRANCH}"
                // sh "git clone https://github.com/mikerain/log-collection.git -b ${BRANCH} ."
                  checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: '.'], [$class: 'CleanBeforeCheckout', deleteUntrackedNestedRepositories: true]], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/mikerain/log-collection.git']]])
            }    
        }
        
        stage ('Build') {
            steps {
                echo "Build..."
                sh 'mvn -U clean package -Ptest ' 
            }    
        }
        
        stage('Arcive Artifact') {
            steps {
              echo "save artifact"
              archiveArtifacts '**/target/*.jar'
            }
        }
        
        stage('build and tag image') {
            steps {
                echo "begin build images"
                sh """
                podman build -f Dockerfile -t registry.mike.com:5000/demo-external-project/log-collection-external:latest
                podman tag registry.mike.com:5000/demo-external-project/log-collection-external:latest registry.mike.com:5000/demo-external-project/log-collection-external:\${BUILD_NUMBER}
                """
            }
  
        }
        
        stage('push image') {
            steps {
        
                echo "push images"
                sh """
                podman login -u admin -p admin registry.mike.com:5000
                podman push registry.mike.com:5000/demo-external-project/log-collection-external:latest
                podman push registry.mike.com:5000/demo-external-project/log-collection-external:\${BUILD_NUMBER}
                """
            }
        }
        
        stage("deploy app") {
            steps {
                echo "rolling app"
                sh """
                export KUBECONFIG=/home/qxu/.kube/config-crc
                
                oc set image dc/log-collection-external log-collection-external=registry.mike.com:5000/demo-external-project/log-collection-external:\${BUILD_NUMBER} -n demo-external-project
                """
                // script {
                //     openshift.withCluster('crc-local') {
                //         openshift.withProject("demo-external-project") {
                //             openshift.set("image", "dc/log-collection-external", "tasklog-collection-external=registry.mike.com:5000/demo-external-project/log-collection-external:${BUILD_NUMBER}")
                //             openshift.selector("dc", "log-collection-external").rollout().latest();
                //         }
                //     }
                // }    
            }
        }
        
    }    
}
